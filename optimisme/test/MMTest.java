package optimisme.test;
import java.util.ArrayList;

import optimisme.MM;
import optimisme.MM.MMParameter;
import optimisme.MMCal;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import ij.io.Opener;
import ij.ImagePlus;

public class MMTest {
	private ImagePlus impPsf = null;
	private ImagePlus impPsfSubSample = null;
	private ImagePlus imp = null;
	private MMParameter param = null;
	private ImagePlus impXest = null;
	private static final double[][][] mat333 = {{{1.0,2.0,3.0},{1.0,2.0,3.0},{1.0,2.0,3.0}},
        {{4.0,5.0,6.0},{4.0,5.0,6.0},{4.0,5.0,6.0}},
        {{5.0,5.0,5.0},{5.0,5.0,5.0},{5.0,5.0,5.0}}};
	private static final double[][][] H = {{{0.01, 0.020, 0.01, 0.020, 0.03, 0.01},
   		{0.01, 0.020, 0.1, 0.02, 0.03, 0.01},
   		{0.01, 0.020, 0.01, 0.2, 0.03, 0.01}},
   {{0.01, 0.020, 0.01, 0.020, 0.03, 0.01},
   		{0.01, 1.0, 2.0, 3.0, 1.0, 0.020},
   		{0.01, 0.01, 0.2, 0.03, 0.01, 0.01}},
   {{0.01, 0.01, 0.020, 0.03, 0.01, 0.01},
   			{ 0.1, 1.0, 2.0, 4.0, 1.0, 0.020},
   			{0.1, 0.01, 0.2 ,0.03, 0.01, 0.01}},
   	{{0.01, 0.01, 0.020, 0.03, 0.01, 0.01},
   			{0.01, 0.1, 0.02, 0.03 ,0.01, 0.020},
   			{0.1, 0.01, 0.2, 0.03, 0.01, 0.01}}};
	
	@Before
	public void setUpBefore() throws Exception {
		// final String path = "/home/dominique/projets/imageJ_optimiste/images/";
	//	final String imageNamePsf = "calculatedPSF_lsm.tif";
		
		final String path =   System.getProperty("user.dir")+ "/data/";
		final String imageNamePsf = "psf_synth.tiff";
		final String imageNamePsfSubSample = "psf_synth_subsampled.tiff";
		
		//final String imageName = "Images_1chanlsm.tif" ;
		final String imageName = "image_synth.tiff";
		final String imageNameXest = "image_Xest_synth1.tif";
		Opener op = new Opener();
		this.impPsf = op.openImage(path, imageNamePsf);
		this.imp = op.openImage(path, imageName);	
		this.impPsfSubSample = op.openImage(path, imageNamePsfSubSample);
        this.impXest = op.openImage(path, imageNameXest);
		this.setMMparameter();
	}

	@After
	public  void tearDownAfter() throws Exception {
		this.impPsf.close();
		this.imp.close();
		this.impPsfSubSample.close();
		this.impXest.close();
	}
	
	
	@Test
	public void testDimImage() {
		double expected = 64;

        double width = impPsf.getWidth();
        
		Assert.assertEquals(expected, width, 1E-2);
	}
	
	@Test
	public void testMMSetter() {
		MM maxMin = new MM();
		maxMin.setData(imp.getImageStack(), impPsf.getImageStack());
		double[][][] dataIm = maxMin.populateData(imp.getImageStack());
		double[][][] dataPsf = maxMin.populateData(impPsf.getImageStack());
		Assert.assertArrayEquals(dataPsf,maxMin.getDataPsf());
		
	}
	
	@Test
	public void testApply_PSFadjvar3D() {
		int xmin = 0;
		int xmax = Integer.MAX_VALUE;
		MM maxMin = new MM();

		maxMin.setDataPsf(mat333);
		double[][][] Hx = maxMin.apply_PSFadjvar3D(H);
		double[][][] HxExpected ={{
			{ 5.539999999999998 , 16.189999999999998 , 31.199999999999999, 31.299999999999994 , 20.979999999999993  , 5.640000000000001},
			{ 5.810000000000000 , 17.490000000000002 , 33.730000000000004, 33.719999999999999 , 22.239999999999998  , 5.910000000000004},
			{   5.489999999999995 , 17.090000000000003 , 33.229999999999997,  33.099999999999994 , 21.650000000000002  , 5.540000000000003}},
			 
			  {{	  11.979999999999999 , 33.369999999999997 , 67.930000000000007 ,64.989999999999995 , 42.979999999999997 ,  9.570000000000000},
				{  12.719999999999999 , 36.289999999999999  ,70.990000000000009  , 67.700000000000003 , 43.750000000000000  , 9.810000000000004},
				{ 12.369999999999996 , 35.810000000000002 , 70.340000000000003 , 66.939999999999998 , 43.100000000000001  , 9.490000000000002}},
			 {{  10.359999999999999 , 26.550000000000001 , 53.470000000000006 ,46.029999999999994,  27.070000000000004 ,  5.530000000000000},
				{	  11.519999999999998,  30.380000000000006 , 56.390000000000008 , 48.530000000000008 , 27.630000000000010  , 5.750000000000004},
				{  11.229999999999999 , 29.890000000000004,  55.670000000000009 ,   47.800000000000004 , 27.040000000000003 ,  5.509999999999998}},
			{{ 4.009999999999997  , 9.060000000000000,  18.140000000000004 ,  13.689999999999998 ,  6.660000000000001 ,  1.300000000000000},
			{   4.799999999999998 , 11.430000000000000,  19.860000000000014 ,14.990000000000014 ,  6.970000000000003  , 1.420000000000005},
			{	   4.640000000000000  ,11.129999999999997 , 19.400000000000006 		,  14.590000000000009  , 6.659999999999999 ,  1.299999999999995}}};
		for (int k =0 ; k< HxExpected.length;k++)
			for (int j =0 ; j<  HxExpected[0].length; j++){
				Assert.assertArrayEquals( HxExpected[k][j],  Hx[k][j], 10-6);
			}
	}
	
	@Test
	public void testApply_PSFvar3D() {
		int xmin = 0;
		int xmax = Integer.MAX_VALUE;
		MM maxMin = new MM();
        
		maxMin.setDataPsf(mat333);
		double[][][] Hx = maxMin.apply_PSFvar3D(H);
		double[][][] HxExpected = {
				{{   1.320000000000000  , 4.869999999999997 , 11.050000000000002 , 14.199999999999996  ,11.770000000000001 ,  3.609999999999999},
				{  1.480000000000003  , 5.320000000000004 , 12.480000000000004 ,16.050000000000001 , 13.280000000000008  , 3.890000000000004},
				{  1.309999999999995  , 5.040000000000001 , 12.130000000000003 ,15.670000000000000  ,12.840000000000003  , 3.550000000000002}},
				{{  5.710000000000000 , 18.480000000000004 , 40.300000000000004 , 47.460000000000001, 38.130000000000003  , 9.820000000000002},
				{   6.160000000000001 , 20.110000000000003 , 43.090000000000003 ,  50.720000000000006 , 39.720000000000006,  10.180000000000001},
				{   5.849999999999997  ,19.639999999999997 , 42.490000000000009 , 50.009999999999998 , 38.990000000000002  , 9.699999999999998}},
				{{   9.940000000000000,  29.360000000000003 , 63.000000000000000 , 66.869999999999990  ,50.000000000000000 , 11.630000000000003},
				{  10.789999999999999,  32.430000000000007  ,65.840000000000003 ,	  70.129999999999995 , 50.640000000000008 , 11.890000000000006},
					 {  10.519999999999994,  31.969999999999999 , 65.209999999999994 ,  69.390000000000001,  49.949999999999996 , 11.529999999999996}},
				 {{	   6.140000000000001,  16.530000000000005 , 36.399999999999999  , 35.919999999999995 , 25.929999999999996 ,  5.470000000000000},
				 {   7.229999999999997 , 19.530000000000001 , 38.780000000000001, 38.510000000000012 , 26.450000000000006 ,  5.680000000000002},
				 {  7.039999999999995  ,19.139999999999997 , 38.200000000000010, 37.900000000000006 , 25.929999999999996 ,  5.469999999999996}}};
		for (int k =0 ; k< HxExpected.length;k++)
			for (int j =0 ; j<  HxExpected[0].length; j++){
				Assert.assertArrayEquals( HxExpected[k][j],  Hx[k][j], 10-6);
			}
	}
	@Test
	public void testMajorante2() {
		int xmin = 0;
		int xmax = Integer.MAX_VALUE;
		MM maxMin = new MM();
		setMMparameter();
		maxMin.setMmparam(param);

		
		double[][][] wXY_Vx = {{
			{   0.999900014997500 ,  0.999750093710955 ,  0.999900014997500, 0.999750093710955 ,  0.999500374687773  ,  0.999750093710955},
			{	0.999950003749688 , 0.999950003749688  , 0.992827902986338, 0.996815278536125  , 0.999950003749688  , 0.999800059980007},
			{   0.999950003749688 ,  0.999950003749688 ,  0.995925043924715, 0.967414821363284 ,  0.985855846669817 ,  0.999800059980007}},

			{{	0.999900014997500 ,  0.999750093710955 ,  0.999900014997500,  0.999750093710955 ,  0.999500374687773 ,  0.999750093710955},
				{  0.999950003749688 ,  0.583162257000689  , 0.409612523927257,  0.303163958479753 , 0.410273889753060 ,  0.714194623841642},
				{  0.999950003749688 , 0.710651109010207  , 0.483588621328427 ,  0.318629728774585 ,  0.710579340568395 ,  0.999950003749688}},

				{{   0.999900014997500 ,  0.999950003749688 , 0.999750093710955 , 0.999500374687773 ,  0.999750093710955 ,  0.999950003749688},
					{	 0.991071029583252 ,  0.598673611267621 ,  0.410983583917384 , 0.219470883387797 ,  0.301784445898747 ,  0.714194623841642},
					{  0.995037190209989  , 0.709202022204508  , 0.483588621328427 ,  0.244049115824529  , 0.710579340568395 ,  0.999950003749688}},

					{{	 0.999900014997500 ,  0.999950003749688 ,  0.999750093710955, 0.999500374687773 ,  0.999750093710955  , 0.999950003749688},
						{	 0.999950003749688 ,  0.991997104959873,   0.996815278536125 , 0.999950003749688 ,  0.999800059980007 ,  0.999900014997500},
						{	 0.991071029583252 ,  0.991997104959873 ,  0.967414821363284 ,  0.985855846669817 ,  0.999800059980007 ,  0.999950003749688}}};

		double[][][] wZ_Vx = {{
			{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
			{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
			{  1   ,  1   ,  1  ,   1  ,   1   ,  1}},
			{	{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
				{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
				{  1   ,  1   ,  1  ,   1  ,   1   ,  1}},

				{	{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
					{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
					{  1   ,  1   ,  1  ,   1  ,   1   ,  1}},
					{	{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
						{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
						{  1   ,  1   ,  1  ,   1  ,   1   ,  1}}};		

	/*	double[][][]  Vvd1 = {{

			{	-0.321901100049937  ,-0.856394199150296 , -1.409500164798780  ,  -1.661472199749906 , -1.250426297501686,  -0.621309100249907},
			{	-0.163968999950064  ,-0.441799258176484 , -0.733025651123196 ,  -0.858881812311078 , -0.640407302048438 , -0.312288900149974},
			{	 0.156450000000000  , 0.417961161451732 ,  0.690675956054020 , 0.814537758163200  , 0.613777859499397  , 0.304509900000000}},

			{{	-0.727681000049936  ,-1.857916949249110 , -2.878527387357645, -3.218061556890279 , -2.267606400934380  ,-1.062678286055283},
				{	-0.376481366836624 , -0.960107126922919 , -1.497450816343001 , -1.656385590172592 , -1.158911379282829 , -0.531493537016208},
				{	  0.352772266936557  , 0.912503718815626 ,  1.425518744763291   , 1.601047475639025 ,  1.130009748730605,   0.528372823021495}},

				{{	  -0.850683080160764 , -2.100570631512394 , -3.088070725000291 ,  -3.281338967560981 , -2.168898923589762 , -0.950130285755380},
					{	  -0.444753669563784 , -1.084070630441942 , -1.598464699882879 ,  -1.675069179389154,  -1.099640656164465,  -0.472551437316111},
					{  0.405729516534446  , 1.023227043956540 ,  1.518909133816234  ,  1.626947762125405 ,  1.076611348267625 ,  0.472612723021495}},


					{{	  -0.506031999800030 , -1.206621072225965  ,-1.679051999749906 ,-1.678225997501686 , -1.028699000249906  ,-0.411650000049989},
						{  -0.266180252536763 , -0.620814686218097 , -0.863751812311077  , -0.850377302048438 , -0.517628100249959 , -0.203962999700045},
						{  0.237634494013286  , 0.583031995273557 ,  0.819051258163199, 0.827098059499397  , 0.507589100099984 ,  0.204213999700037}}};

		Vvd1 = MMCal.dotMult(Vvd1, 1.0e+03 );*/
	/*	double[][][]  Vhd1 = {{

			{ -3.219011000499366e-01  ,-5.344930991003598e-01,  -5.531059656484834e-01 , -2.519720349511263e-01 ,  4.110459022482198e-01 ,  6.291171972517795e-01},
			{  -4.858701000000002e-01  ,-8.123233573267798e-01 , -8.443323585951953e-01 , -3.778281961390085e-01  , 6.295204125108598e-01  , 9.572355991502436e-01},
			{  -3.294200999999998e-01 , -5.508121958750480e-01 , -5.716175639929070e-01 ,  -2.539663940298289e-01 ,  4.287605138470571e-01 ,  6.479676396508463e-01}},

			{{  -0.727681000049936 , -1.130235949199174 , -1.020610438108535 ,-0.339534169532635  , 0.950455155955899  , 1.204928114879097},
				{  -1.104162366886561  ,-1.713861709285468  ,-1.557954127528617  , -0.498468943362225 ,  1.447929366845663 ,  1.832345957145717},
				{  -0.751390099950004 , -1.154130257406399 , -1.044939101580953  ,  -0.322940212486491 ,  0.976891639937243 ,  1.230709031436607}},

				{{  -0.850683080160764,  -1.249887551351631,  -0.987500093487897 , -0.193268242560690 ,  1.112440043971219 ,  1.218768637834382},
					{  -1.295436749724548 , -1.889204512229788 , -1.501894162928834  , -0.269872722066965 ,  1.687868567195907 ,  1.845857856682737},
					{  -0.889707233190102 , -1.271706984807695 , -1.006212073069139  , -0.161834093757794 ,  1.137532153338127 ,  1.241859231436607}},

					{{  -0.506031999800030 , -0.700589072425935 , -0.472430927523941 ,  0.000826002248220 ,  0.649526997251780 ,  0.617049000199918},
						{  -0.772212252336793 , -1.055223506107269 , -0.715368053616922   , 0.014200512510859 ,  0.982276199050259  , 0.930714100749831},
						{  -0.534577758323507 , -0.709826004846998 , -0.479348790727279 ,  0.022247313847058 ,  0.662767239650846  , 0.627339000349884}}};

		Vhd1 = MMCal.dotMult(Vhd1, 1.0e+02 );*/

	/*	double[][][]  Vtd1 = {{
			{	  -0.321901100049937,  -0.856394199150296 , -1.409500164798780 ,  -1.661472199749906 , -1.250426297501686 , -0.621309100249907},
			{  -0.485870100000000,  -1.298193457326780 , -2.142525815921975 , -2.520354012060984 , -1.890833599550124 , -0.933598000399880},
			{ -0.329420100000000 , -0.880232295875048 , -1.451849859867955 ,  -1.705816253897784 , -1.277055740050727,  -0.629088100399880}},

			{{  -0.405779900000000 , -1.001522750098814 , -1.469027222558865,-1.556589357140373 , -1.017180103432694 , -0.441369185805376},
				{  -0.618292266886561,  -1.519830618845249 , -2.233452387778671 ,-2.354093135001888 , -1.535684180667084 ,-0.660573822671611},
				{  -0.421969999950004 , -1.025288061481355 , -1.498609599069401 , -1.567583417526062,  -1.019452291435877 , -0.436710899650116}},

				{{  -1.230020801108277e-01 , -2.426536822632843e-01  ,-2.095433376426463e-01 ,-0.632774106707020e-01 ,  0.987074773446175e-01 ,  1.125480002999027e-01},
					{  -1.912743828379873e-01  ,-3.666171857823074e-01 , -3.105572211825238e-01 , -0.819609998872638e-01 ,  1.579782004629806e-01 ,  1.714901000000000e-01},
					{  -1.383171332400983e-01 , -2.558938606413938e-01 , -2.171668321295801e-01, -0.560607134008837e-01 ,  1.045798000000000e-01 ,  1.157300000000002e-01}},

					{{   0.344651080360734 ,  0.893949559286429 ,  1.409018725250385 ,1.603112970059295  , 1.140199923339856 ,  0.538480285705391},
						{  0.523224497387755  , 1.357205503510274  , 2.143731612822187  , 2.427804847400011  , 1.722212479254363 ,  0.807068723321458},
						{   0.355129474866595 ,  0.917010454827292 ,  1.443873737169151 , 1.627955144774003 , 1.153190231086723 ,  0.538670000000000}}};
		Vtd1 = MMCal.dotMult(Vtd1, 1.0e+03 );*/

	/*	double[][][] Vvd2 = {{
			{  -0.061767782808199 , -0.164328642813309 ,-0.270461020586467  ,-0.318810510309201 , -0.239937235224618  ,-0.119219491809877},
			{  -0.031463084700928 , -0.084774362745686  ,-0.140656149371321 , -0.164805976843550 , -0.122884137816169  ,0.059923352094425},
			{  0.030020306295454  , 0.080200205090347  , 0.132529905731208 ,  0.156297046911294  , 0.117774364586387,   0.058430683720027}},

			{{ 	-0.139630594483104,  -0.356505183048734  ,-0.552344351858935 , -0.617495644713792 , -0.435118176501009 , -0.203911330398901},
				{  -0.072240881731970 , -0.184229530371842 , -0.287337374042793 , -0.317834469545274 , -0.222376954780172 , -0.101985290989332},
				{ 	0.067691476548272  , 0.175095181429123 ,  0.273534735364050 ,  0.307215951500463  , 0.216831184236128 ,  0.101386474818147}},

				{{ 	-0.163232768467796 , -0.403066626738498 , -0.592552438648351 , -0.629637589424037 , -0.416177756535928,  -0.182315130706066},
					{ 	 -0.085341268049422 , -0.208016186460680,  -0.306720357257625 ,-0.321419557886467 , -0.211003830699851, -0.090675224599468},
					{  0.077853143876450  , 0.196341254518170  , 0.291454889307297 , 0.312185811094335  , 0.206584866961688 ,  0.090686984367108}},

					{{ 	-0.097099620513251,  -0.231531698119354 , -0.322183798775886 , -0.322025301872771  ,-0.197391237285585 , -0.078989191997600},
						{   -0.051075824295014 , -0.119124621495581 , -0.165740453619893 , -0.163174094433980  ,-0.099324730691198,  -0.039137307279866},
						{ 	 0.045598340023293 ,  0.111874714465721,   0.157163116917459  , 0.158707172147957 , 0.097398403689585 ,  0.039185470251294}}};

		double[][][] Vhd2 = {{
			{  	 -0.061767782808199  ,-0.102560860005110 , -0.106132377773158	,  -0.048349489722734,   0.078873275084583  , 0.120717743414741},
			{	 -0.093230867509128 , -0.155872138049867 , -0.162014164398793 , -0.072499317194963 ,  0.120795114111964 ,  0.183678529136485},
			{	 -0.063210561213673 , -0.105692239254974  ,-0.109684463757932, -0.048732176014877 ,  0.082272431787057 ,  0.124334848270125}},

			{{  -0.139630594483104 , -0.216874588565630 , -0.195839168810202 ,-0.065151292854857 ,  0.182377468212783 ,  0.231206846102109},
				{ -0.211871476215074 , -0.328863237205501 , -0.298947012481153 ,-0.095648388357338  , 0.277834982977885 ,  0.351598509892949},
				{  -0.144179999666802 , -0.221459532324651 , -0.200507458546226, -0.061967172220924  , 0.187450215713549 ,  0.236153800474969}},

				{{  -0.163232768467796 , -0.239833858270702 , -0.189485811909853,  -0.037085150775686,   0.213459832888109 ,  0.233862625829861},
					{  -0.248574036517218 , -0.362508776681960 , -0.288189982706798, -0.051784351404527 ,  0.323875560074725 ,  0.354191231930243},
					{ -0.170720892640767  ,-0.244020666040241  ,-0.193076347917671,-0.031053429617490  , 0.218274615942079 , 0.238293349335663}},


					{{  -0.097099620513251,  -0.134432077606103 ,-0.090652100656531  , 0.000158496903115  , 0.124634064587185 , 0.118402045287986},
						{	-0.148175444808266 , -0.202480874806669 , -0.137267932780844,  0.002724856089028 ,  0.188483428329968 ,  0.178589468699318},
						{	 -0.102577104784973 , -0.136204500364241,  -0.091979530329106 , 0.004268911319526 ,  0.127174659871596 ,  0.120376535261027}}};

		double[][][]  Vtd2={{
			{   -0.061767782808199,  -0.164328642813309 , -0.270461020586467,  -0.318810510309201 , -0.239937235224618 , -0.119219491809877},
			{  -0.093230867509128,  -0.249103005558995 , -0.411117169957788 , -0.483616487152751,  -0.362821373040787 , -0.179142843904302},
			{  -0.063210561213673 , -0.168902800468648  ,-0.278587264226580 ,-0.327319440241457 ,-0.245047008454400 , -0.120712160184276}},

			{{   -0.077862811674905,  -0.192176540235424 , -0.281883331272468, -0.298685134404592 , -0.195180941276391 , -0.084691838589023},
			{  -0.118640608705947 ,-0.291631707861580 , -0.428564555943941,  -0.451713627106315, -0.294673758240394  ,-0.126753777483930},
			{  -0.080969438453129 , -0.196736731522805  ,-0.287559726311099 ,-0.300794722517146 , -0.195616938590654 , -0.083797986385810}},

			{{   -0.023602173984692 , -0.046561443689764 , -0.040208086789415 ,-0.012141944710244,   0.018940419965082 , 0.021596199692835},
			{  -0.036702560302144 , -0.070348099778602 , -0.059591070004248 ,-0.015727033051437  , 0.030313544045403  , 0.032906266082698},
			{  -0.026540892973966 , -0.049102026689555 , -0.041670916061000 ,-0.010757173457566 ,  0.020067226770964  , 0.022206775631658}},

			{{  0.066133147954544  , 0.171534928619144  , 0.270368639872465, 0.307612287551266 , 0.218786519250342 , 0.103325938708467},
			{ 0.100398591708952 ,  0.260426493584243   ,0.411348543510197,   0.465857751003753 , 0.330465619258995 , 0.154863856028069},
			{	 0.068143787855794 ,  0.175959953531794   ,0.277056771120359 ,  0.312379112057375 ,  0.221279155986891  , 0.103362341912256}}};
*/

		double[][][] Dir2 = {{ 
			{  -0.061767782808199 , -0.164328642813309,  -0.270461020586467  ,-0.318810510309201  ,-0.239937235224618  ,-0.119219491809877},
			{ -0.093230867509128 , -0.249103005558995,  -0.411117169957788 , -0.483616487152751 , -0.362821373040787 , -0.179142843904302},
			{  -0.063210561213673, -0.168902800468648 , -0.278587264226580, -0.327319440241457,  -0.245047008454400 , -0.120712160184276}},

			{{  -0.139630594483104,  -0.356505183048734 , -0.552344351858935, -0.617495644713792 , -0.435118176501009 , -0.203911330398901},
			{ -0.211871476215074 , -0.540734713420575 ,-0.839681725901729 , -0.935330114259066 , -0.657495131281182 , -0.305896621388233},
			{-0.144179999666802  ,-0.365639531991453 , -0.566146990537679  ,-0.628114162758603 , -0.440663947045054  ,-0.204510146570085}},

			{{-0.163232768467796 , -0.403066626738498 , -0.592552438648351 , -0.629637589424037 , -0.416177756535928 , -0.182315130706066},
			{-0.248574036517218 , -0.611082813199178 , -0.899272795905976 , -0.951057147310503 , -0.627181587235778 , -0.272990355305535},
			{ -0.170720892640767 , -0.414741558681008 , -0.607817906598679 , -0.638871336216169 , -0.420596720274090 , -0.182303370938427}},

			{{ -0.097099620513251,  -0.231531698119354 , -0.322183798775886, -0.322025301872771 , -0.197391237285585 , -0.078989191997600},
			{ -0.148175444808266 , -0.350656319614935 , -0.487924252395779, -0.485199396306751  ,-0.296715967976783  ,-0.118126499277465},
			{ -0.102577104784973 , -0.238781605149214 , -0.330761135478320, -0.326492224158794  ,-0.199317564287198 , -0.078941029026171}}};

		double[][][]  Dir1  = { 
			{{  0.321901100049937 ,  0.856394199150296 ,  1.409500164798780,  1.661472199749906 ,  1.250426297501686 ,  0.621309100249907},
			{   0.485870100000000  , 1.298193457326780 ,  2.142525815921975 ,   2.520354012060984 ,  1.890833599550124,  0.933598000399880},
			{   0.329420100000000 ,  0.880232295875048 ,  1.451849859867955 ,  1.705816253897784 ,  1.277055740050727 , 0.629088100399880}},

			{{   0.727681000049936 ,  1.857916949249110,   2.878527387357645,    3.218061556890279 ,  2.267606400934380 ,  1.062678286055283},
			{ 1.104162366886561  , 2.818024076172029  , 4.375978203700646  ,  4.874447147062871 ,  3.426517780217208 ,  1.594171823071491},
			{   0.751390099950004 ,  1.905520357356403 ,  2.950459458937356 ,   3.273399671423846 ,  2.296508031486603  , 1.065799000049996}},

		  {{  0.850683080160764  , 2.100570631512394 ,  3.088070725000291, 3.281338967560981 ,  2.168898923589762 ,  0.950130285755380},
			{ 1.295436749724548  , 3.184641261954336  , 4.686535424883170 ,   4.956408146950135 ,  3.268539579754228 ,  1.422681723071491},
			{ 0.889707233190102 ,  2.161414217997796  , 3.167626291066936 ,   3.329460384824730 ,  2.191928231486603 ,  0.950069000049996}},

		{{  0.506031999800030 ,  1.206621072225965 ,  1.679051999749906,  1.678225997501686 ,  1.028699000249906 ,  0.411650000049989},
		{  0.772212252336793  , 1.827435758444062 ,  2.542803812060983 , 2.528603299550124 ,  1.546327100499865 ,  0.615612999750034},
		{ 0.534577758323507  , 1.244403763170505 ,  1.723752553897784 , 1.701505240050727 ,  1.038738000399881 , 0.411399000049996}}};
		
		Dir1 = MMCal.dotMult ( Dir1, -1.0e+03);
/*		double[][][] Hd1 = {
			{{-0.209968343854521 , -0.519295871482781  ,-0.840443036520430  ,-0.984289848938190  ,-0.853395097420130 , -0.490181676472681},
			{  -0.295731646262088 , -0.731303391406253 , -1.182990914035920, -1.384720740338649  ,-1.199550524445476  ,-0.688470646841317},
			{  -0.212248033800089 , -0.525015565993734 , -0.849184694063437  , -0.993666951795281 , -0.859967755989452 , -0.493097856229583}},

			{{	 -0.522522267722394 , -1.207441013056695 , -1.857830032633528, -2.063783854206557 , -1.700039699725945  ,-0.919877701487371},
			{ 	-0.736203493651683 , -1.700489692332488 , -2.614004690570292 , -2.901615098007647 , -2.387722112480100 , -1.291024552347195},
			{   -0.528568632800871 , -1.220989503887707 , -1.875920590665916 , -2.081268297444654 , -1.710771137346500 , -0.924177910677988}},
			
			{{  -0.700009140200253 , -1.533373551928204 , -2.254027785831087 , -2.384460709963335  ,-1.871201413027067 ,-0.960231668174394},
			{ 	-0.986932186243165 , -2.160063177826459 , -3.170563559616750 ,  -3.350816855442389 , -2.626287450050923 , -1.346756283655917},
			{   -0.708908458791419  ,-1.551160664172328 , -2.274584999961906 ,  -2.402276869416587 , -1.880502382263014,  -0.963507629594782}},

			{{	-0.556841072001244  ,-1.157568622795922 , -1.626287630205884,	-1.639143445978163 , -1.224651464186697,  -0.596377241643530},
			{ 	-0.785902183003635 , -1.631750965722510 , -2.288124737987506 ,  -2.303644126599475 , -1.718707519429801 , -0.836371333246853},
			{  -0.564773054540937 , -1.171929690299541  ,-1.641146817562702  ,  -1.650926315921848 , -1.230094600719899 , -0.598115432762102}}};

		 Hd1 = MMCal.dotMult(Hd1, 1.0e+05);
 
		double[][][] Hd2 = {
		{{	 -4.028963882941518,  -9.964474988736315 ,-16.126786436705022  , -18.886981622646804 ,-16.375316213225553, -9.405819155084174},
		{  -5.674627422209537, -14.032567468788908 ,-22.699744061423964  , -26.570623687206474, -23.017497066619406 ,-13.210674141007287},
		{  -4.072707564900358, -10.074226974121585 ,-16.294525162797097 ,  -19.066913549737787 ,-16.501435243859301 , -9.461776080309358}},

		{{	-10.026384482723980 ,-23.168903193132412 ,-35.648850511059386  , -39.600781994818860, -32.621100990862949 ,-17.651013328865059},
		{   -14.126592761397953, -32.629735644668706,-50.158658656870884  , -55.677452217132824, -45.816650153455974, -24.772740489878313},
		{ 	-10.142404765005866, -23.428877526522069, -35.995980004947519 ,  -39.936281094475724, -32.827020482304050 ,-17.733527612685357}},

	  {{-13.432079768890524, -29.423038475061315 ,-43.251265279075717, -45.754068943800448 ,-35.905426372361447 ,-18.425342788872090},
	{ 	-18.937683939828830 ,-41.448231521817007, -60.838152246021608 ,  -64.296930866316160, -50.394345586728292, -25.842145184198394},
	{ 	-13.602843763730815 ,-29.764345319216137 ,-43.645726042762796 , -46.095933158434697, -36.083897414424563 ,-18.488203361100997}},
				 
	{{ -10.684908622158190 ,-22.211930082672293 ,-31.205914211114862 ,-31.452597194279928 ,-23.499144813078455 ,-11.443545836866068},
	{   -15.080232823288791 ,-31.310747068643749, -43.905532423516206  , -44.203325200537307, -32.979307232715342, -16.048656823782700},
	{   -10.837110952213644, -22.487496490590704 ,-31.491038759375137, -31.678692026334211, -23.603590083730236, -11.476899003871218}}};
	*/				   
	/*	double[][] Bexpected = {{ 1.717325245098369e+12 ,  0.000329527835518e+12},
							{ 0.000329527835518e+12 ,  0.000000063231234e+12}};*/
	//	B = majorante2(x,wXY_Vx,wZ_Vx,Dir1,Dir2,dx,dx,dx,dx,dx,dx,dx,dx,eta,lambda,xmin,xmax)
	//	 B = majorante2(x,wXY_Vx,wZ_Vx,Dir1,Dir2,Vvd1,Vhd1,Vtd1,Vvd2,Vhd2,Vtd2,Hd1,Hd2,xmin,xmax);

	double[][] Bexpected = {{	     13.840 ,  13.840},
			                { 13.840  , 13.840}};
	double[][] B =  maxMin.majorante2(H, wXY_Vx, wZ_Vx, Dir1,Dir2,Dir2, Dir2,Dir2,Dir2,Dir2,Dir2,Dir2,Dir2,xmin,xmax);	
        for(int k = 0 ; k < B.length ; k++)
        	for(int j = 0 ; j < B[0].length ; j++)
        	   Assert.assertEquals(Bexpected[k][j], B[k][j],10e-4);
}
	
	@Test
	public void testMajorante1() {
		int xmin = 0;
		int xmax = Integer.MAX_VALUE;
		MM maxMin = new MM();
		setMMparameter();
		maxMin.setMmparam(param);
		double[][][] Hg = {{
			{  0.209968343854521 ,  0.519295871482781  , 0.840443036520430 , 0.984289848938190 ,  0.853395097420130  , 0.490181676472681},
			{   0.295731646262088 ,  0.731303391406253 , 1.182990914035920 , 1.384720740338649 ,  1.199550524445476 ,  0.688470646841317},
			{   0.212248033800089 ,  0.525015565993734 ,  0.849184694063437 ,  0.993666951795281 ,  0.859967755989452,   0.493097856229583}},

			{{   0.522522267722394 ,  1.207441013056695 ,  1.857830032633528 , 2.063783854206557 ,  1.700039699725945 ,  0.919877701487371},
				{  0.736203493651683   ,1.700489692332488 ,  2.614004690570292 , 2.901615098007647  , 2.387722112480100  , 1.291024552347195},
				{   0.528568632800871 ,  1.220989503887707  , 1.875920590665916 ,  2.081268297444654  , 1.710771137346500 ,  0.924177910677988}},

				{{ 	 0.700009140200253 ,  1.533373551928204 ,  2.254027785831087 ,  2.384460709963335  , 1.871201413027067  , 0.960231668174394},
					{	 0.986932186243165 , 2.160063177826459 ,  3.170563559616750 ,   3.350816855442389  , 2.626287450050923 ,  1.346756283655917},
					{	 0.708908458791419 ,  1.551160664172328  , 2.274584999961906 ,  2.402276869416587  , 1.880502382263014 ,  0.963507629594782}},

					{{	   0.556841072001244 ,  1.157568622795922 ,  1.626287630205884 ,  1.639143445978163 ,  1.224651464186697 ,  0.596377241643530},
						{  0.785902183003635  ,1.631750965722510  , 2.288124737987506   , 2.303644126599475  , 1.718707519429801 ,  0.836371333246853},
						{   0.564773054540937 , 1.171929690299541  , 1.641146817562702, 1.650926315921848   ,1.230094600719899  , 0.598115432762102}}};


		Hg = MMCal.dotMult(Hg, 1.0e+05);


		double[][][] Vvg = {{
			{0.321901100049937 ,  0.856394199150296 ,  1.409500164798780 ,1.661472199749906 ,  1.250426297501686,   0.621309100249907},
			{0.163968999950064 ,  0.441799258176484 ,  0.733025651123196 ,0.858881812311078  , 0.640407302048438 ,  0.312288900149974},
			{-0.156450000000000 , -0.417961161451732 , -0.690675956054020 ,-0.814537758163200 , -0.613777859499397 , -0.304509900000000}},

			{{   0.727681000049936 ,  1.857916949249110 ,  2.878527387357645 ,   3.218061556890279  , 2.267606400934380 ,  1.062678286055283},
				{  0.376481366836624  , 0.960107126922919 ,  1.497450816343001  ,  1.656385590172592 ,  1.158911379282829 ,  0.531493537016208},
				{ -0.352772266936557 , -0.912503718815626 , -1.425518744763291 ,  -1.601047475639025,  -1.130009748730605 , -0.528372823021495}},

				{{ 0.850683080160764 ,  2.100570631512394 ,  3.088070725000291 ,  3.281338967560981  , 2.168898923589762  , 0.950130285755380},
					{  0.444753669563784 ,  1.084070630441942 ,  1.598464699882879  ,  1.675069179389154 ,  1.099640656164465,   0.472551437316111},
					{ -0.405729516534446 , -1.023227043956540  ,-1.518909133816234  , -1.626947762125405 , -1.076611348267625 , -0.472612723021495}},

					{{  0.506031999800030,   1.206621072225965 ,  1.679051999749906 ,  1.678225997501686 ,  1.028699000249906 ,  0.411650000049989},
						{  0.266180252536763  , 0.620814686218097 ,  0.863751812311077  ,  0.850377302048438 ,  0.517628100249959 , 0.203962999700045},
						{  -0.237634494013286 , -0.583031995273557,  -0.819051258163199 ,  -0.827098059499397,  -0.507589100099984 , -0.204213999700037}}};

		Vvg  = MMCal.dotMult(Vvg ,  1.0e+03 );

		double[][][] Vhg = {{
			{321.90  , 534.49  , 553.11 ,  251.97 , -411.05  ,-629.12},
			{   485.87  , 812.32  , 844.33 ,  377.83 , -629.52 , -957.24},
			{    329.42 ,  550.81  , 571.62  , 253.97 , -428.76,  -647.97}},
			{{   727.68  , 1130.24 ,  1020.61  ,  339.53 ,  -950.46 , -1204.93},
				{   1104.16 ,  1713.86 ,  1557.95 ,   498.47 , -1447.93 , -1832.35},
				{   751.39  , 1154.13  , 1044.94  ,  322.94  , -976.89 , -1230.71}},
				{{   850.68 ,  1249.89 ,   987.50 ,   193.27 , -1112.44 , -1218.77},
					{	 1295.44 ,  1889.20 ,  1501.89 ,   269.87 , -1687.87,  -1845.86},
					{   889.71 ,  1271.71 ,  1006.21 ,   161.83 , -1137.53 , -1241.86}},
					{{  5.0603e+02 ,  7.0059e+02 ,  4.7243e+02 , -8.2600e-01 , -6.4953e+02 , -6.1705e+02},
						{    7.7221e+02,   1.0552e+03 ,  7.1537e+02 , -1.4201e+01 , -9.8228e+02 , -9.3071e+02},
						{   5.3458e+02 ,  7.0983e+02  , 4.7935e+02  ,-2.2247e+01 , -6.6277e+02,  -6.2734e+02}}};	

		double[][][] Vtg = {{
			{     0.321901100049937  , 0.856394199150296  , 1.409500164798780 ,1.661472199749906  , 1.250426297501686 ,  0.621309100249907},
			{     0.485870100000000 ,  1.298193457326780  , 2.142525815921975 , 2.520354012060984  , 1.890833599550124  , 0.933598000399880},
			{	  0.329420100000000  , 0.880232295875048  , 1.451849859867955  ,  1.705816253897784 ,  1.277055740050727 ,  0.629088100399880}},

			{{      0.405779900000000 ,  1.001522750098814 ,  1.469027222558865 , 1.556589357140373 ,  1.017180103432694 ,  0.441369185805376},
				{      0.618292266886561 ,  1.519830618845249  , 2.233452387778671 ,  2.354093135001888 ,  1.535684180667084 ,  0.660573822671611},
				{    0.421969999950004 ,  1.025288061481355 ,  1.498609599069401,  1.567583417526062 ,  1.019452291435877 ,  0.436710899650116}},

				{{  1.230020801108277e-01  , 2.426536822632843e-01 , 2.095433376426463e-01 , 0.632774106707020e-01 , -0.987074773446175e-01,  -1.125480002999027e-01},
					{   1.912743828379873e-01 ,  3.666171857823074e-01 ,  3.105572211825238e-01 ,    0.819609998872638e-01  ,-1.579782004629806e-01,  -1.714901000000000e-01},
					{  1.383171332400983e-01 ,  2.558938606413938e-01 ,  2.171668321295801e-01  ,    0.560607134008837e-01  ,-1.045798000000000e-01  ,-1.157300000000002e-01}},

					{{   -0.344651080360734 , -0.893949559286429 , -1.409018725250385 , -1.603112970059295 , -1.140199923339856 , -0.538480285705391},
						{ -0.523224497387755 , -1.357205503510274 , -2.143731612822187  , -2.427804847400011 , -1.722212479254363 , -0.807068723321458},
						{ -0.355129474866595 , -0.917010454827292 , -1.443873737169151  ,   -1.627955144774003  ,-1.153190231086723 , -0.538670000000000}}};

		Vtg  = MMCal.dotMult(Vtg ,  1.0e+03 );

		double[][][] wXY_Vx = {{
			{   0.999900014997500 ,  0.999750093710955 ,  0.999900014997500, 0.999750093710955 ,  0.999500374687773  ,  0.999750093710955},
			{	0.999950003749688 , 0.999950003749688  , 0.992827902986338, 0.996815278536125  , 0.999950003749688  , 0.999800059980007},
			{   0.999950003749688 ,  0.999950003749688 ,  0.995925043924715, 0.967414821363284 ,  0.985855846669817 ,  0.999800059980007}},

			{{	0.999900014997500 ,  0.999750093710955 ,  0.999900014997500,  0.999750093710955 ,  0.999500374687773 ,  0.999750093710955},
				{  0.999950003749688 ,  0.583162257000689  , 0.409612523927257,  0.303163958479753 , 0.410273889753060 ,  0.714194623841642},
				{  0.999950003749688 , 0.710651109010207  , 0.483588621328427 ,  0.318629728774585 ,  0.710579340568395 ,  0.999950003749688}},

				{{   0.999900014997500 ,  0.999950003749688 , 0.999750093710955 , 0.999500374687773 ,  0.999750093710955 ,  0.999950003749688},
					{	 0.991071029583252 ,  0.598673611267621 ,  0.410983583917384 , 0.219470883387797 ,  0.301784445898747 ,  0.714194623841642},
					{  0.995037190209989  , 0.709202022204508  , 0.483588621328427 ,  0.244049115824529  , 0.710579340568395 ,  0.999950003749688}},

					{{	 0.999900014997500 ,  0.999950003749688 ,  0.999750093710955, 0.999500374687773 ,  0.999750093710955  , 0.999950003749688},
						{	 0.999950003749688 ,  0.991997104959873,   0.996815278536125 , 0.999950003749688 ,  0.999800059980007 ,  0.999900014997500},
						{	 0.991071029583252 ,  0.991997104959873 ,  0.967414821363284 ,  0.985855846669817 ,  0.999800059980007 ,  0.999950003749688}}};

		double[][][] wZ_Vx = {{
			{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
			{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
			{  1   ,  1   ,  1  ,   1  ,   1   ,  1}},
			{	{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
				{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
				{  1   ,  1   ,  1  ,   1  ,   1   ,  1}},

				{	{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
					{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
					{  1   ,  1   ,  1  ,   1  ,   1   ,  1}},
					{	{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
						{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
						{  1   ,  1   ,  1  ,   1  ,   1   ,  1}}};		


		double[][][] dF  = { 
				{{  0.321901100049937 ,  0.856394199150296 ,  1.409500164798780,  1.661472199749906 ,  1.250426297501686 ,  0.621309100249907},
					{   0.485870100000000  , 1.298193457326780 ,  2.142525815921975 ,   2.520354012060984 ,  1.890833599550124,  0.933598000399880},
					{   0.329420100000000 ,  0.880232295875048 ,  1.451849859867955 ,  1.705816253897784 ,  1.277055740050727 , 0.629088100399880}},

					{{   0.727681000049936 ,  1.857916949249110,   2.878527387357645,    3.218061556890279 ,  2.267606400934380 ,  1.062678286055283},
						{ 1.104162366886561  , 2.818024076172029  , 4.375978203700646  ,  4.874447147062871 ,  3.426517780217208 ,  1.594171823071491},
						{   0.751390099950004 ,  1.905520357356403 ,  2.950459458937356 ,   3.273399671423846 ,  2.296508031486603  , 1.065799000049996}},

						{{  0.850683080160764  , 2.100570631512394 ,  3.088070725000291, 3.281338967560981 ,  2.168898923589762 ,  0.950130285755380},
							{ 1.295436749724548  , 3.184641261954336  , 4.686535424883170 ,   4.956408146950135 ,  3.268539579754228 ,  1.422681723071491},
							{ 0.889707233190102 ,  2.161414217997796  , 3.167626291066936 ,   3.329460384824730 ,  2.191928231486603 ,  0.950069000049996}},

							{{  0.506031999800030 ,  1.206621072225965 ,  1.679051999749906,  1.678225997501686 ,  1.028699000249906 ,  0.411650000049989},
								{  0.772212252336793  , 1.827435758444062 ,  2.542803812060983 , 2.528603299550124 ,  1.546327100499865 ,  0.615612999750034},
								{ 0.534577758323507  , 1.244403763170505 ,  1.723752553897784 , 1.701505240050727 ,  1.038738000399881 , 0.411399000049996}}};
		dF = MMCal.dotMult(dF, 1.0e+03);
		double[][][] Grad = dF;	  

		//	(x,wXY_Vx,wZ_Vx,-Grad,Vvg,Vhg,Vtg,Hg,eta,lambda,xmin,xmax);

		double B = maxMin.majorante1(H, wXY_Vx, wZ_Vx, MMCal.dotMult(Grad,-1) , Vvg, Vhg, Vtg, Hg, xmin, xmax);
        double Bexpected = 1.717325245098369e+12; 
		Assert.assertEquals( Bexpected, B , 10-6);
			
	}
	
	
	@Test
	public void testCritere() {
		int xmin = 0;
		int xmax = Integer.MAX_VALUE;
		MM maxMin = new MM();
		setMMparameter();
		maxMin.setMmparam(param);

		maxMin.setDataPsf(mat333);
		ArrayList A = maxMin.critere(MMCal.copy(H), MMCal.copy(H), xmin, xmax);
		// double F =  Double.valueOf(A.get(0).toString());
		double F = ((double[]) A.get(0))[0];
		//(double) A.get(0);
		Assert.assertEquals( 3.427473696889062e+04, F, 1);
		double[][][] dF = (double[][][]) A.get(1);
		double[][][] dFexpected  = { 
				{{  0.321901100049937 ,  0.856394199150296 ,  1.409500164798780,  1.661472199749906 ,  1.250426297501686 ,  0.621309100249907},
					{   0.485870100000000  , 1.298193457326780 ,  2.142525815921975 ,   2.520354012060984 ,  1.890833599550124,  0.933598000399880},
					{   0.329420100000000 ,  0.880232295875048 ,  1.451849859867955 ,  1.705816253897784 ,  1.277055740050727 , 0.629088100399880}},

					{{   0.727681000049936 ,  1.857916949249110,   2.878527387357645,    3.218061556890279 ,  2.267606400934380 ,  1.062678286055283},
						{ 1.104162366886561  , 2.818024076172029  , 4.375978203700646  ,  4.874447147062871 ,  3.426517780217208 ,  1.594171823071491},
						{   0.751390099950004 ,  1.905520357356403 ,  2.950459458937356 ,   3.273399671423846 ,  2.296508031486603  , 1.065799000049996}},

						{{  0.850683080160764  , 2.100570631512394 ,  3.088070725000291, 3.281338967560981 ,  2.168898923589762 ,  0.950130285755380},
							{ 1.295436749724548  , 3.184641261954336  , 4.686535424883170 ,   4.956408146950135 ,  3.268539579754228 ,  1.422681723071491},
							{ 0.889707233190102 ,  2.161414217997796  , 3.167626291066936 ,   3.329460384824730 ,  2.191928231486603 ,  0.950069000049996}},

							{{  0.506031999800030 ,  1.206621072225965 ,  1.679051999749906,  1.678225997501686 ,  1.028699000249906 ,  0.411650000049989},
								{  0.772212252336793  , 1.827435758444062 ,  2.542803812060983 , 2.528603299550124 ,  1.546327100499865 ,  0.615612999750034},
								{ 0.534577758323507  , 1.244403763170505 ,  1.723752553897784 , 1.701505240050727 ,  1.038738000399881 , 0.411399000049996}}};
		dFexpected = MMCal.dotMult(dFexpected,1.0e+03);

		for (int k =0 ; k< dFexpected.length;k++)
			for (int j =0 ; j<  dFexpected[0].length; j++){
				Assert.assertArrayEquals( dFexpected[k][j], dF[k][j], 10-6);
			}
		double[][][] wXY_Vx = (double[][][]) A.get(2);
		double[][][] wXY_Vxexpected = {{
			{   0.999900014997500 ,  0.999750093710955 ,  0.999900014997500, 0.999750093710955 ,  0.999500374687773  ,  0.999750093710955},
			{	0.999950003749688 , 0.999950003749688  , 0.992827902986338, 0.996815278536125  , 0.999950003749688  , 0.999800059980007},
			{   0.999950003749688 ,  0.999950003749688 ,  0.995925043924715, 0.967414821363284 ,  0.985855846669817 ,  0.999800059980007}},

			{{	0.999900014997500 ,  0.999750093710955 ,  0.999900014997500,  0.999750093710955 ,  0.999500374687773 ,  0.999750093710955},
				{  0.999950003749688 ,  0.583162257000689  , 0.409612523927257,  0.303163958479753 , 0.410273889753060 ,  0.714194623841642},
				{  0.999950003749688 , 0.710651109010207  , 0.483588621328427 ,  0.318629728774585 ,  0.710579340568395 ,  0.999950003749688}},

				{{   0.999900014997500 ,  0.999950003749688 , 0.999750093710955 , 0.999500374687773 ,  0.999750093710955 ,  0.999950003749688},
					{	 0.991071029583252 ,  0.598673611267621 ,  0.410983583917384 , 0.219470883387797 ,  0.301784445898747 ,  0.714194623841642},
					{  0.995037190209989  , 0.709202022204508  , 0.483588621328427 ,  0.244049115824529  , 0.710579340568395 ,  0.999950003749688}},

					{{	 0.999900014997500 ,  0.999950003749688 ,  0.999750093710955, 0.999500374687773 ,  0.999750093710955  , 0.999950003749688},
						{	 0.999950003749688 ,  0.991997104959873,   0.996815278536125 , 0.999950003749688 ,  0.999800059980007 ,  0.999900014997500},
						{	 0.991071029583252 ,  0.991997104959873 ,  0.967414821363284 ,  0.985855846669817 ,  0.999800059980007 ,  0.999950003749688}}};

		for (int k =0 ; k< wXY_Vxexpected.length;k++)
			for (int j =0 ; j<  wXY_Vxexpected[0].length; j++){
				Assert.assertArrayEquals( wXY_Vxexpected[k][j], wXY_Vx[k][j], 10-6);
			}

		double[][][] wZ_Vx = (double[][][]) A.get(3);
		double[][][] wZ_Vxexpected = {{
			{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
			{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
			{  1   ,  1   ,  1  ,   1  ,   1   ,  1}},
			{	{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
				{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
				{  1   ,  1   ,  1  ,   1  ,   1   ,  1}},

				{	{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
					{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
					{  1   ,  1   ,  1  ,   1  ,   1   ,  1}},
					{	{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
						{  1  ,   1   ,  1   ,  1   ,  1   ,  1},
						{  1   ,  1   ,  1  ,   1  ,   1   ,  1}}};			  		 
		for (int k =0 ; k< wZ_Vxexpected.length;k++)
			for (int j =0 ; j<  wZ_Vxexpected[0].length; j++){
				Assert.assertArrayEquals( wZ_Vxexpected[k][j], wZ_Vx[k][j], 10-6);
			}
	}

	@Test
	public void testProcess() {
		int xmin = 0;
		int xmax = Integer.MAX_VALUE;
		MM algo = new MM();
		algo.process(this.imp.getStack(), this.impPsfSubSample.getStack(),this.param );
		double[][][] imageDeconvol = algo.getDataImDeconvol() ;
	//	System.out.print("image"+algo.toString(imageDeconvol[imageDeconvol.length/2]));
		double[][] imExpected = {
		{0.0 ,0.0, 0.0, 0.0, 0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0 ,0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ,7.408571710904369E-4 ,7.149303483434698E-4, 7.062015802776846E-4 ,7.149303483434698E-4 ,7.408571710904369E-4 ,0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ,7.236176011841667E-4, 6.441643720403341E-4, 5.811756565276471E-4 ,5.361473128053527E-4 ,5.092892660649474E-4 ,5.003802523537844E-4 ,5.092892660649474E-4 ,5.361473128053527E-4, 5.811756565276471E-4 ,6.441643720403341E-4, 7.236176011841667E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ,7.494043382804279E-4 ,6.352014653329466E-4, 5.361473128053527E-4 ,4.5628859872094094E-4 ,3.9631897518115875E-4, 3.551690298644451E-4, 3.312916317274667E-4, 3.234805353509559E-4 ,3.312916317274667E-4 ,3.551690298644451E-4, 3.9631897518115875E-4, 4.5628859872094094E-4 ,5.361473128053527E-4, 6.352014653329466E-4 ,7.494043382804279E-4 ,0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0, 7.149303483434698E-4, 5.811756565276471E-4, 4.6503733384819406E-4 ,3.7143676403913307E-4 ,3.0051852759871775E-4, 2.499108809495982E-4 ,2.1652965847171005E-4, 1.9767858407732886E-4, 1.9159667136341756E-4 ,1.9767858407732886E-4 ,2.1652965847171005E-4 ,2.499108809495982E-4, 3.0051852759871775E-4 ,3.7143676403913307E-4 ,4.6503733384819406E-4 ,5.811756565276471E-4 ,7.149303483434698E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0, 7.149303483434698E-4, 5.631418764230343E-4 ,4.302942403248911E-4 ,3.234805353509559E-4 ,2.4304325081462018E-4 ,1.8561688655496688E-4 ,1.4666437959688376E-4, 1.2199667884259659E-4 ,1.0846245571132285E-4, 1.0416106730561804E-4 ,1.0846245571132285E-4 ,1.2199667884259659E-4 ,1.4666437959688376E-4, 1.8561688655496688E-4, 2.4304325081462018E-4, 3.234805353509559E-4 ,4.302942403248911E-4, 5.631418764230343E-4 ,7.149303483434698E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0, 7.494043382804279E-4, 5.811756565276471E-4 ,4.302942403248911E-4 ,3.0809214243193256E-4, 2.1652965847171005E-4, 1.5191473422089443E-4, 1.0846245571132285E-4 ,8.053058650370974E-5, 6.362538582191954E-5, 5.465470348001806E-5 ,5.1854153705340456E-5 ,5.465470348001806E-5 ,6.362538582191954E-5, 8.053058650370974E-5 ,1.0846245571132285E-4 ,1.5191473422089443E-4 ,2.1652965847171005E-4 ,3.0809214243193256E-4 ,4.302942403248911E-4 ,5.811756565276471E-4, 7.494043382804279E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0, 6.352014653329466E-4 ,4.6503733384819406E-4, 3.234805353509559E-4, 2.1652965847171005E-4, 1.4151951836720102E-4, 9.188205858599041E-5 ,6.0539300292098626E-5, 4.157127515957771E-5 ,3.069499768241857E-5, 2.5160137843060364E-5 ,2.347177202656404E-5, 2.5160137843060364E-5 ,3.069499768241857E-5 ,4.157127515957771E-5, 6.0539300292098626E-5 ,9.188205858599041E-5, 1.4151951836720102E-4 ,2.1652965847171005E-4, 3.234805353509559E-4 ,4.6503733384819406E-4, 6.352014653329466E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ,7.236176011841667E-4 ,5.361473128053527E-4, 3.7143676403913307E-4, 2.4304325081462018E-4 ,1.5191473422089443E-4, 9.188205858599041E-5 ,5.465470348001806E-5 ,3.270139372668749E-5 ,2.0320896600951963E-5 ,1.3687945788044422E-5 ,1.049622216481463E-5 ,9.553573296626756E-6, 1.049622216481463E-5 ,1.3687945788044422E-5 ,2.0320896600951963E-5 ,3.270139372668749E-5 ,5.465470348001806E-5 ,9.188205858599041E-5, 1.5191473422089443E-4, 2.4304325081462018E-4, 3.7143676403913307E-4, 5.361473128053527E-4 ,7.236176011841667E-4 ,0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ,6.441643720403341E-4, 4.5628859872094094E-4, 3.0051852759871775E-4, 1.8561688655496688E-4 ,1.0846245571132285E-4, 6.0539300292098626E-5, 3.270139372668749E-5 ,1.7460811271743352E-5 ,9.553573296626756E-6, 5.671663997248638E-6, 3.943714159007374E-6, 3.4571239718769046E-6, 3.943714159007374E-6 ,5.671663997248638E-6, 9.553573296626756E-6 ,1.7460811271743352E-5, 3.270139372668749E-5, 6.0539300292098626E-5 ,1.0846245571132285E-4 ,1.8561688655496688E-4, 3.0051852759871775E-4, 4.5628859872094094E-4 ,6.441643720403341E-4 ,0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0, 5.811756565276471E-4, 3.9631897518115875E-4, 2.499108809495982E-4 ,1.4666437959688376E-4, 8.053058650370974E-5, 4.157127515957771E-5, 2.0320896600951963E-5, 9.553573296626756E-6, 4.473789243349499E-6 ,2.239948301668937E-6 ,1.3479309653604204E-6, 1.114190510924067E-6, 1.3479309653604204E-6, 2.239948301668937E-6, 4.473789243349499E-6 ,9.553573296626756E-6, 2.0320896600951963E-5 ,4.157127515957771E-5, 8.053058650370974E-5, 1.4666437959688376E-4, 2.499108809495982E-4 ,3.9631897518115875E-4, 5.811756565276471E-4 ,0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ,7.408571710904369E-4,5.361473128053527E-4, 3.551690298644451E-4 ,2.1652965847171005E-4 ,1.2199667884259659E-4, 6.362538582191954E-5 ,3.069499768241857E-5 ,1.3687945788044422E-5 ,5.671663997248638E-6, 2.239948301668937E-6 ,9.091419431479246E-7 ,4.474332923676693E-7, 3.3842472503166847E-7 ,4.474332923676693E-7 ,9.091419431479246E-7 ,2.239948301668937E-6, 5.671663997248638E-6, 1.3687945788044422E-5 ,3.069499768241857E-5 ,6.362538582191954E-5, 1.2199667884259659E-4 ,2.1652965847171005E-4 ,3.551690298644451E-4 ,5.361473128053527E-4 ,7.408571710904369E-4 ,0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0, 7.149303483434698E-4, 5.092892660649474E-4 ,3.312916317274667E-4, 1.9767858407732886E-4 ,1.0846245571132285E-4 ,5.465470348001806E-5, 2.5160137843060364E-5, 1.049622216481463E-5 ,3.943714159007374E-6,1.3479309653604204E-6, 4.474332923676693E-7, 1.764743814658952E-7,1.197689181739423E-7 ,1.764743814658952E-7 ,4.474332923676693E-7, 1.3479309653604204E-6 ,3.943714159007374E-6 ,1.049622216481463E-5, 2.5160137843060364E-5, 5.465470348001806E-5 ,1.0846245571132285E-4 ,1.9767858407732886E-4 ,3.312916317274667E-4, 5.092892660649474E-4 ,7.149303483434698E-4 ,0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ,7.062015802776846E-4 ,5.003802523537844E-4, 3.234805353509559E-4, 1.9159667136341756E-4 ,1.0416106730561804E-4 ,5.1854153705340456E-5 ,2.347177202656404E-5, 9.553573296626756E-6,3.4571239718769046E-6 ,1.114190510924067E-6 ,3.3842472503166847E-7, 1.197689181739423E-7 ,7.673225173187552E-8 ,1.197689181739423E-7, 3.3842472503166847E-7 ,1.114190510924067E-6, 3.4571239718769046E-6 ,9.553573296626756E-6, 2.347177202656404E-5, 5.1854153705340456E-5, 1.0416106730561804E-4, 1.9159667136341756E-4, 3.234805353509559E-4, 5.003802523537844E-4 ,7.062015802776846E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0, 7.149303483434698E-4, 5.092892660649474E-4 ,3.312916317274667E-4 ,1.9767858407732886E-4 ,1.0846245571132285E-4, 5.465470348001806E-5 ,2.5160137843060364E-5 ,1.049622216481463E-5, 3.943714159007374E-6 ,1.3479309653604204E-6, 4.474332923676693E-7, 1.764743814658952E-7 ,1.197689181739423E-7 ,1.764743814658952E-7, 4.474332923676693E-7, 1.3479309653604204E-6 ,3.943714159007374E-6, 1.049622216481463E-5, 2.5160137843060364E-5, 5.465470348001806E-5, 1.0846245571132285E-4 ,1.9767858407732886E-4, 3.312916317274667E-4, 5.092892660649474E-4 ,7.149303483434698E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ,7.408571710904369E-4 ,5.361473128053527E-4, 3.551690298644451E-4 ,2.1652965847171005E-4, 1.2199667884259659E-4, 6.362538582191954E-5, 3.069499768241857E-5 ,1.3687945788044422E-5, 5.671663997248638E-6, 2.239948301668937E-6, 9.091419431479246E-7 ,4.474332923676693E-7 ,3.3842472503166847E-7, 4.474332923676693E-7, 9.091419431479246E-7, 2.239948301668937E-6 ,5.671663997248638E-6 ,1.3687945788044422E-5, 3.069499768241857E-5, 6.362538582191954E-5, 1.2199667884259659E-4, 2.1652965847171005E-4 ,3.551690298644451E-4, 5.361473128053527E-4 ,7.408571710904369E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ,5.811756565276471E-4 ,3.9631897518115875E-4, 2.499108809495982E-4 ,1.4666437959688376E-4, 8.053058650370974E-5, 4.157127515957771E-5 ,2.0320896600951963E-5, 9.553573296626756E-6, 4.473789243349499E-6 ,2.239948301668937E-6 ,1.3479309653604204E-6, 1.114190510924067E-6, 1.3479309653604204E-6 ,2.239948301668937E-6, 4.473789243349499E-6, 9.553573296626756E-6 ,2.0320896600951963E-5 ,4.157127515957771E-5 ,8.053058650370974E-5 ,1.4666437959688376E-4 ,2.499108809495982E-4 ,3.9631897518115875E-4 ,5.811756565276471E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ,6.441643720403341E-4 ,4.5628859872094094E-4, 3.0051852759871775E-4 ,1.8561688655496688E-4 ,1.0846245571132285E-4, 6.0539300292098626E-5 ,3.270139372668749E-5, 1.7460811271743352E-5 ,9.553573296626756E-6 ,5.671663997248638E-6 ,3.943714159007374E-6 ,3.4571239718769046E-6 ,3.943714159007374E-6 ,5.671663997248638E-6 ,9.553573296626756E-6 ,1.7460811271743352E-5 ,3.270139372668749E-5 ,6.0539300292098626E-5, 1.0846245571132285E-4 ,1.8561688655496688E-4, 3.0051852759871775E-4 ,4.5628859872094094E-4 ,6.441643720403341E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ,7.236176011841667E-4 ,5.361473128053527E-4 ,3.7143676403913307E-4 ,2.4304325081462018E-4, 1.5191473422089443E-4 ,9.188205858599041E-5 ,5.465470348001806E-5 ,3.270139372668749E-5 ,2.0320896600951963E-5 ,1.3687945788044422E-5 ,1.049622216481463E-5, 9.553573296626756E-6 ,1.049622216481463E-5 ,1.3687945788044422E-5,2.0320896600951963E-5 ,3.270139372668749E-5, 5.465470348001806E-5 ,9.188205858599041E-5, 1.5191473422089443E-4 ,2.4304325081462018E-4 ,3.7143676403913307E-4, 5.361473128053527E-4 ,7.236176011841667E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ,6.352014653329466E-4, 4.6503733384819406E-4 ,3.234805353509559E-4 ,2.1652965847171005E-4, 1.4151951836720102E-4 ,9.188205858599041E-5 ,6.0539300292098626E-5 ,4.157127515957771E-5 ,3.069499768241857E-5, 2.5160137843060364E-5, 2.347177202656404E-5 ,2.5160137843060364E-5, 3.069499768241857E-5, 4.157127515957771E-5, 6.0539300292098626E-5, 9.188205858599041E-5 ,1.4151951836720102E-4, 2.1652965847171005E-4, 3.234805353509559E-4 ,4.6503733384819406E-4, 6.352014653329466E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0, 7.494043382804279E-4 ,5.811756565276471E-4, 4.302942403248911E-4 ,3.0809214243193256E-4, 2.1652965847171005E-4 ,1.5191473422089443E-4 ,1.0846245571132285E-4, 8.053058650370974E-5 ,6.362538582191954E-5, 5.465470348001806E-5 ,5.1854153705340456E-5, 5.465470348001806E-5 ,6.362538582191954E-5, 8.053058650370974E-5, 1.0846245571132285E-4, 1.5191473422089443E-4 ,2.1652965847171005E-4 ,3.0809214243193256E-4 ,4.302942403248911E-4, 5.811756565276471E-4, 7.494043382804279E-4 ,0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0, 7.149303483434698E-4, 5.631418764230343E-4 ,4.302942403248911E-4, 3.234805353509559E-4, 2.4304325081462018E-4 ,1.8561688655496688E-4 ,1.4666437959688376E-4, 1.2199667884259659E-4 ,1.0846245571132285E-4 ,1.0416106730561804E-4 ,1.0846245571132285E-4 ,1.2199667884259659E-4, 1.4666437959688376E-4, 1.8561688655496688E-4, 2.4304325081462018E-4, 3.234805353509559E-4, 4.302942403248911E-4, 5.631418764230343E-4 ,7.149303483434698E-4 ,0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0, 7.149303483434698E-4 ,5.811756565276471E-4 ,4.6503733384819406E-4, 3.7143676403913307E-4 ,3.0051852759871775E-4, 2.499108809495982E-4 ,2.1652965847171005E-4 ,1.9767858407732886E-4 ,1.9159667136341756E-4 ,1.9767858407732886E-4 ,2.1652965847171005E-4 ,2.499108809495982E-4 ,3.0051852759871775E-4 ,3.7143676403913307E-4, 4.6503733384819406E-4 ,5.811756565276471E-4 ,7.149303483434698E-4 ,0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ,7.494043382804279E-4, 6.352014653329466E-4, 5.361473128053527E-4 ,4.5628859872094094E-4 ,3.9631897518115875E-4 ,3.551690298644451E-4 ,3.312916317274667E-4 ,3.234805353509559E-4 ,3.312916317274667E-4 ,3.551690298644451E-4 ,3.9631897518115875E-4, 4.5628859872094094E-4 ,5.361473128053527E-4 ,6.352014653329466E-4, 7.494043382804279E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0, 7.236176011841667E-4 ,6.441643720403341E-4 ,5.811756565276471E-4 ,5.361473128053527E-4 ,5.092892660649474E-4, 5.003802523537844E-4 ,5.092892660649474E-4, 5.361473128053527E-4 ,5.811756565276471E-4, 6.441643720403341E-4 ,7.236176011841667E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ,7.408571710904369E-4 ,7.149303483434698E-4, 7.062015802776846E-4 ,7.149303483434698E-4 ,7.408571710904369E-4, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0  },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0, 0.0 ,0.0, 0.0, 0.0, 0.0, 0.0 ,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ,0.0 ,0.0, 0.0 ,0.0 ,0.0, 0.0, 0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 },
				{0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ,0.0, 0.0 ,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ,0.0 ,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 }};
		for (int k =0 ; k< imExpected.length;k++)
				Assert.assertArrayEquals( imExpected[k], imageDeconvol[imageDeconvol.length/2][k], 10-6);
	}
	
	@Test
	public void testMMAlgorithmSynth() {	
        
		setMMparameter();
		this.param.NbIt = 20;
		MM maxMin = new MM( imp.getImageStack() , this.impPsfSubSample.getImageStack() , param);		
		double[][][] dataXest =  maxMin.populateData(this.impXest.getImageStack()); 
		double[][][] dataXestCurent = maxMin.getDataImDeconvol(); 
    //	System.out.print(String.valueOf(dataXest.length)+"  "+String.valueOf(dataXest[0].length)+"  "+String.valueOf(dataXest[0][0].length)+" \n ");
    //   	System.out.print(String.valueOf(dataXestCurent.length)+"  "+String.valueOf(dataXestCurent[0].length)+"  "+String.valueOf(dataXestCurent[0][0].length)+" \n ");
       	double[][][] dataim = maxMin.getDataIm();
	    for (int k =0 ; k< dataXest.length; k++){
	        for (int j =0 ; j< dataXest[0].length; j++){	     	 	
	       	 		Assert.assertArrayEquals(dataim[k][j], dataXestCurent[k][j],10e-6);
	       	 	   // for (int i =0 ; i< dataXest[0][0].length; i++)
	       	 	 	 //      	 	    	}
	       	 	    }}
	     	       	 	    
	}
	
	@Test
	public void testMMAlgorithmSmall() {		
		int xmin = 0;
		int xmax = Integer.MAX_VALUE;
		MM maxMin = new MM();
		setMMparameter();
		maxMin.setMmparam(param);

		maxMin.setDataPsf(mat333);
		maxMin.setDataIm(H);
		ArrayList l =  maxMin.MMAlgorithm( MMCal.copy(H), MMCal.copy(H),  MMCal.copy(H), xmin, xmax);
		double[][][] X =(double[][][])  l.get(2);
		double SNRend = (double) l.get(0);
		double[] SNR = (double[]) l.get(1);
		double[] Crit = (double[]) l.get(3);
		double[] NGrad = (double[]) l.get(4);
	
	/*	min,xmax,NbIt)
		****************************************
		Majorize-Minimize Memory Gradient Algorithm
		phixy(u) =  sqrt(1 + u^2/delta^2)-1
		phiz(u) = 1/2 u^2
		regul = 0.1
		T = 1
		eta = 1
		xmin = 0 and xmax = Inf
		Initial criterion value = 34274.737
		warning: division by zero
		B =    1.7173e+12
		Iteration number = 11
		Computation time (cpu) =0.037661
		Final criterion value = 36.703
		Final SNR value = 0.71481
		*****************************************/ 
		double SNRendExpected =  0.71481;
		double[] SNRexpected ={ Double.POSITIVE_INFINITY, 4.86891 ,  3.93127 ,  3.36062 , 
							2.65822 ,  2.07810  , 1.26745 ,  1.02977,   0.96874 ,  0.87433,   0.71481};

		double[][][] Xestimed ={{
			{ -0.0138878 ,  0.0626636,   0.1737555 ,  0.3134178 ,  0.1588561 ,  0.0130700},
		   {0.0656354 , -0.0623117 , -0.2048697,  -0.3184678 , -0.1287095, -0.0118784},
		   { 0.0038940 ,  0.0589338 ,  0.1318610 ,  0.4025510,   0.1377184 ,  0.0278019}},
		   
		   {{  0.040049 , -0.033251 , -0.035510 , -0.305476  , 0.085360  , 0.059772 },
		   {  -0.050478 , -0.019603 , -0.142676 ,  0.105038 , -0.265945 , -0.264202 },
		   {  0.030458 , -0.029514  , 0.052271 , -0.306907 ,  0.065789 ,  0.120452}},
		   
	      {{  0.0432094 ,  0.0237096 ,  0.1353247 , -0.2117044  , 0.1344810  , 0.0932568 },
        	{   0.0219960 , -0.0132686 ,  0.0171221 ,  1.3102479 , -0.0072590 , -0.1475299 },
	        {   0.0621740 ,  0.0249206  , 0.1597780 , -0.1852988  , 0.1058662 ,  0.1385218 }},
	        
	      {{ 0.0267108,   0.0994396 ,  0.2078515 ,  0.0602863 ,  0.0919971 ,  0.0378822 },
        	{  0.0021323 , -0.2720399 , -0.7082491,  -0.9267495 , -0.2927225 , -0.0145028 },
        	{  0.0449079,   0.0920988  , 0.2857274,   0.0710675  , 0.0644668  , 0.0484913 }}};

		double[] Critexpected = { 34274.737, 2660.31, 1211.397, 781.28,  471.711, 293.729,
				 118.313, 70.725, 66.696,  51.91, 36.703};
				

		double[] NGradExpected = {1.8153e+04	,2.1667e+03	,1.1638e+03	,7.9299e+02	,6.7848e+02	,
				         4.3470e+02,  3.4160e+02, 1.5866e+02	,1.1978e+02	,8.8262e+01	,8.7062e+01};
		   
		Assert.assertEquals(SNRendExpected, SNRend, 1E-3);
		
		Assert.assertArrayEquals(Critexpected, Crit, 1E-2);
		Assert.assertArrayEquals(NGradExpected ,NGrad, 1);
		for (int k =0 ; k<  Xestimed.length;k++)
			for (int j =0 ; j<  Xestimed[0].length; j++){
				Assert.assertArrayEquals(Xestimed[k][j],X[k][j],10e-6);
			}				
		Assert.assertArrayEquals(SNRexpected, SNR, 1E-3);
		// System.out.print(maxMin.toString(imagedeconv)+ "  ");
		
	//	double expected = 13;
    //    double width = data[0][0].l;
	//	Assert.assertEquals(expected, width, 1E-2);
	}
	
	private void setMMparameter(){
    	int NbIt = 10;
    	double regul = 1e-1;
    	int T = 1;
    	double regulZ = 1e-2;
    	double TZ  = 0.01;
    	int eta = 1;
    	int phixy = 4;
    	int phiz = 5;
    	int numberChannel = 5;
    	int numberChanneli = 1;
    	double[] dataDimIm = {64, 64, 32};
    	double[] resPSF ={this.impPsf.getCalibration().pixelWidth,
    			this.impPsf.getCalibration().pixelHeight,this.impPsf.getCalibration().pixelDepth} ;
    	
    	double[] resIM ={this.imp.getCalibration().pixelWidth,
    			this.imp.getCalibration().pixelHeight,this.imp.getCalibration().pixelDepth} ;
    	
		MMParameter param = new MMParameter(NbIt, 
	        		regul, T, regulZ ,
	        		phixy, phiz, TZ, 
	        		eta, resIM, resPSF, this.impPsf.getCalibration().getUnits() ) ;
		this.param = param;
	}
	
}
